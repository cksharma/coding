import java.util.HashMap;
import java.util.Map;

public class TreeLine {
    class Point {
        int x;
        int y;
    }
    class Slope {
        int xIntercept;
        int yIntercept;
        Slope(int xIntercept, int yIntercept) {
            this.xIntercept = xIntercept;
            this.yIntercept = yIntercept;
        }

        @Override
        public int hashCode() {
            return 1;
        }

        @Override
        public boolean equals(Object _slope) {
            Slope slope = (Slope)_slope;
            int xInterceptOne = slope.xIntercept;
            int yInterceptOne = slope.yIntercept;
            return yIntercept * xInterceptOne == xIntercept * yInterceptOne;
        }
    }

    public int maxPoints(Point[] points) {
        if (points == null || points.length == 0) return 0;

        int ans = 1;
        for (int i = 0; i < points.length; i++) {
            int x1 = points[i].x;
            int y1 = points[i].y;

            Map<Slope, Integer> map = new HashMap<>();
            int duplicate = 1;
            int infinitySlope = 0;

            for (int j = i + 1; j < points.length; j++) {
                int x2 = points[j].x;
                int y2 = points[j].y;

                if (x1 == x2) {
                    if (y1 == y2) duplicate++;
                    else infinitySlope++;
                    continue;
                }

                int xIntercept = x2 - x1;
                int yIntercept = y2 - y1;
                Slope slope = new Slope(xIntercept, yIntercept);
                map.put(slope, map.get(slope) == null ? 1 : map.get(slope) + 1);
            }
            for (int values : map.values()) {
                ans = Math.max(ans, values + duplicate);
            }
            ans = Math.max(ans, duplicate + infinitySlope);
        }
        return ans;
    }

    public int longest(int[] x, int[] y) {
        Point[] points = new Point[x.length];
        for (int i = 0; i < x.length; ++i) {
            points[i] = new Point();
            points[i].x = x[i];
            points[i].y = y[i];
        }
        return maxPoints(points);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        TreeLine obj;
        int answer;
        obj = new TreeLine();
        long startTime = System.currentTimeMillis();
        answer = obj.longest(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int p2;

        // ----- test 0 -----
        p0 = new int[]{0, 3, 6};
        p1 = new int[]{0, 3, 6};
        p2 = 3;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[]{0, 3, 6};
        p1 = new int[]{0, 3, 7};
        p2 = 2;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[]{0, 3, 6, 20, 12};
        p1 = new int[]{0, 3, 0, 20, 11};
        p2 = 3;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
