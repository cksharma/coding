#include <bits/stdc++.h>
using namespace std;

class OneGcd {
public:
	vector <int> solve(vector <long long> X, vector <int> Y) {
		vector<int> result;
		for (int i = 0; i < X.size(); ++i) {
			long long x = X[i];
			long long y = X[i] + Y[i] - 1;
			long long ans = 0;
			vector<int> v, sub;
			if (Y[i] % 2 == 0) v.push_back(2);
			if (Y[i] % 3 == 0) v.push_back(3);
			if (Y[i] % 5 == 0) v.push_back(5);
			if (Y[i] % 7 == 0) v.push_back(7);
			if (Y[i] % 30 == 0) v.push_back(30);
			if (Y[i] % 42 == 0) v.push_back(42);
			if (Y[i] % 70 == 0) v.push_back(70);
			if (Y[i] % 105 == 0) v.push_back(105);
			
			if (Y[i] % 6 == 0) sub.push_back(6);
			if (Y[i] % 10 == 0) sub.push_back(10);
			if (Y[i] % 14 == 0) sub.push_back(14);
			if (Y[i] % 15 == 0) sub.push_back(15);
			if (Y[i] % 21 == 0) sub.push_back(21);
			if (Y[i] % 35 == 0) sub.push_back(35);
			if (Y[i] % 210 == 0) sub.push_back(210);

			for (int num : v) {
				if (Y[i] % num == 0) {
					long long cnt = Y[i] / num ;
					ans += cnt;
				}
			}
			for (int num : sub) {
				if (Y[i] % num == 0) {
					long long cnt = Y[i] / num ;
					ans -= cnt;
				}
			}
			result.push_back(Y[i] - ans);
		}
		return result;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <long long> p0, vector <int> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	OneGcd *obj;
	vector <int> answer;
	obj = new OneGcd();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <long long> p0;
	vector <int> p1;
	vector <int> p2;

	{
	// ----- test 0 -----
	long long t0[] = {5ll,3ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	long long t0[] = {10ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {15};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
		{
	// ----- test 1 -----
	long long t0[] = {2, 2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4, 4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2, 2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
