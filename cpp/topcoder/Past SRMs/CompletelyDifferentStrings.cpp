#include <bits/stdc++.h>
#include <string_view>
using namespace std;

class CompletelyDifferentStrings {
public:
    int count(int S, vector <string> forbidden) {
        int ans = 1;
        unordered_map<int, set<char>> mp;
        for (const string& str : forbidden) {
            for (int i = 0; i < str.length(); ++i) {
                mp[i].insert(str[i]);
            }
        }
        string s = "chandra";
        for (auto& [k,v] : mp) {
            ans *= (S - v.size());
        }
        //string_view cks = "ChandrA";
        //cout << cks << endl;
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    CompletelyDifferentStrings *obj;
    int answer;
    obj = new CompletelyDifferentStrings();
    clock_t startTime = clock();
    answer = obj->count(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    vector <string> p1;
    int p2;

    {
    // ----- test 0 -----
    p0 = 3;
    string t1[] = {"ab"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 4;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 1 -----
    p0 = 1;
    string t1[] = {"aaaaa","aaaaa"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    p0 = 7;
    string t1[] = {"baba","babe","cage","cafe","feed","deed","deaf","dead"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 90;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    p0 = 3;
    string t1[] = {"abacaa","abacaa","acabab"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 8;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
