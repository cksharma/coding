#include <bits/stdc++.h>
using namespace std;

class EraseToGCD {
public:
	static const int md = 1000000007;

	long long mulmod(int base, int pow) {
		if (pow == 0) return 1;
		if (pow % 2 == 1) {
			return (base * mulmod(base, pow - 1) % md) % md;
		}
		return (mulmod(base, pow / 2) % md * mulmod(base, pow / 2) % md) % md;
	}

	int countWays(vector <int> S, int goal) {
		long long ans = 0;
		int n = S.size();
		vector<int> div(n + 1, 0);
        vector<int> div2(n + 1, 0);
        if (goal == 1) {
            for (int& item : S) item *= 2;
            goal *= 2;
        }
		//div[n - 1] = (S[n - 1] % goal == 0) ? 1 : 0;
		for (int i = n - 1; i >= 0; --i) {
			div[i] = div[i + 1];
			if (S[i] % goal == 0) {
				div[i] += 1;
			}

			div2[i] = div2[i + 1];
			if (S[i] % (goal * goal) != 0 && S[i] % goal == 0) {
			    div2[i] += 1;
			}
		}

		for (int i = 0; i < n; ++i) {
			for (int j = i + 1; j < n; ++j) {
				int gcd = __gcd(S[i], S[j]);
				if (gcd == goal) {
                    int cnt = div[j + 1];
                    ans += mulmod(2, cnt);
                    ans %= md;
                } else if (gcd % goal == 0) {
                    int all = div[j + 1];
				    int one = div2[j + 1];
                    int more = div[j + 1] - div2[j + 1];

                    ans += (mulmod(2, one) - 1) * more;
                    ans %= md;
				}
			}
			if (S[i] == goal) ans++;
		}
		ans = ans % md;
		return (int)ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	EraseToGCD *obj;
	int answer;
	obj = new EraseToGCD();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {6,4,30,90,66};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 15;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {8,8,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 983;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {2,2,2,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 31;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
