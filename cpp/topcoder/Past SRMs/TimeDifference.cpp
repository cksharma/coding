#include <bits/stdc++.h>
using namespace std;

class TimeDifference {
public:
	string calculate(string startTime, string endTime) {
        string ans = "";
        int min_first = 0, min_secon = 0, i, j;
        for (i = 0; i < startTime.size(); ++i) if (startTime[i] == ':') break;
        for (j = 0; j < endTime.size(); ++j) if (endTime[j] == ':') break;

        string s1 = startTime.substr(0, i); string s2 = startTime.substr(i + 1);
        string s3 = endTime.substr(0, j); string s4 = endTime.substr(j + 1);

        min_first = stoi(s1) * 60 + stoi(s2);
        min_secon = stoi(s3) * 60 + stoi(s4);

        int min_diff = min_secon - min_first;
        bool is_neg = min_diff < 0;
        if (is_neg) min_diff = min_first - min_secon;

        int minute = min_diff % 60; string min_s = to_string(minute);  if (min_s.size() < 2) min_s = "0" + min_s;
        int hour = min_diff / 60; string hour_s = to_string(hour);
        ans = hour_s + ":" + min_s;
        if (is_neg) ans = "-" + ans;
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	TimeDifference *obj;
	string answer;
	obj = new TimeDifference();
	clock_t startTime = clock();
	answer = obj->calculate(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = "00:00";
	p1 = "13:23";
	p2 = "13:23";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "100:15";
	p1 = "13:23";
	p2 = "-86:52";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "001:00";
	p1 = "8:15";
	p2 = "7:15";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "123:45";
	p1 = "543:21";
	p2 = "419:36";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "111:11";
	p1 = "222:12";
	p2 = "111:01";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "10:42";
	p1 = "10:47";
	p2 = "0:05";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	p0 = "10:47";
	p1 = "010:47";
	p2 = "0:00";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
