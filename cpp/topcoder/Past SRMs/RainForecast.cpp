#include <bits/stdc++.h>
using namespace std;

class RainForecast {
public:
	double predictRain(int ilkoProb, vector <int> deliverProbs) {
		int n = deliverProbs.size();
		vector<double> correct(n);
		vector<double> tamper(n);
		if( deliverProbs.size() == 0 ) return max( 1 - ilkoProb / 100., ilkoProb / 100. );

		correct[0] = 1 - deliverProbs[0] / 100.;
		tamper[0] = deliverProbs[0] / 100.;

	 	for(int i = 1; i < n; ++i) {
	 		double prevCor = correct[i - 1];
	 		double prevTmp = tamper[ i - 1];

	 		double myCor = 1 - deliverProbs[i] / 100.;
	 		double myTmp = deliverProbs[i] / 100.;

	 		double runCor = prevCor * myCor + prevTmp * myTmp;
	 		double runTmp = prevCor * myTmp + prevTmp * myCor;

	 		correct[i] = runCor;
	 		tamper[i] = runTmp;
	 	}
	 	double ilkoCor = ilkoProb / 100.;

	 	double cor = ilkoCor * correct[n - 1];
	 	double tmp = ( 1 - correct[n - 1] ) * (1 - ilkoCor);
	 	return max( cor + tmp, 1 - cor - tmp );
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	RainForecast *obj;
	double answer;
	obj = new RainForecast();
	clock_t startTime = clock();
	answer = obj->predictRain(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;
	double p2;

	{
	// ----- test 0 -----
	p0 = 93;
	p1.clear() /*{}*/;
	p2 = 0.93;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 93;
	int t1[] = {50};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 100;
	int t1[] = {90,90};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.82;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 89;
	int t1[] = {13,92,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.7084846399999999;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 50;
	int t1[] = {3,17,92,34,2,14};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.5;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
