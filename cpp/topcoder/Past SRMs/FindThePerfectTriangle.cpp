#include <bits/stdc++.h>
using namespace std;

const double MIN_THRES = 1e-4;

class FindThePerfectTriangle {
public:

  double getPerimeter(int x1, int y1, int x2, int y2, int x3, int y3) {
    double x = sqrt( (x1 - x2) * (x1 - x2 ) + (y1 - y2) * (y1 - y2) );
    double y = sqrt( (x1 - x3) * (x1 - x3 ) + (y1 - y3) * (y1 - y3) );
    double z = sqrt( (x2 - x3) * (x2 - x3 ) + (y2 - y3) * (y2 - y3) );

    if( x < y + z && y < x + z && z < x + y)
      return x + y + z;
    return 1e20;
  }

  double getArea(int x1, int y1, int x2, int y2, int x3, int y3) {
    double x = sqrt( (x1 - x2) * (x1 - x2 ) + (y1 - y2) * (y1 - y2) );
    double y = sqrt( (x1 - x3) * (x1 - x3 ) + (y1 - y3) * (y1 - y3) );
    double z = sqrt( (x2 - x3) * (x2 - x3 ) + (y2 - y3) * (y2 - y3) );

    double S = ( x + y + z ) / 2.0;
    double area = ( S * ( S - x ) * (S - y) * (S - z) );

    return area >= 0 ? sqrt(area) : 1e20;
  }

  vector <int> constructTriangle(int A, int P) {
    int x, y, z;

    long long AREA = 16LL * A * A;
    bool found = false;
    for(int i = 1; i < 500; ++i ) for(int j = 1; j < 500; ++j) {
      long long value = 1LL * P * ( P - 2*i ) * ( P - 2*j) * (2*i + 2 * j - P );
      if( value == AREA ) {
        x = i;
        y = j;
        z = ( P - x - y);
        found = true;
        //std::cout << "CKS is here (" << x << ", " << y << ", " << z << ")" << std::endl;
        goto there;
      }
    }

    there:;

    std::vector<int> result;
    if(not found) return result;

    std::vector< pair<int, int>> allPos;
    for(int x1 = 0; x1 <= P; x1++) {
      for(int y1 = 0; y1 <= P; y1++) {
        if ( (x1 * x1 + y1 * y1) == x * x || ( (x1 * x1 + y1 * y1) == z* z )
            || (x1 * x1 + y1 * y1 == y * y )) {
          allPos.push_back( std::make_pair( x1, y1));
        }
      }
    }

    //std::cout << "CKS size" << allPos.size() << std::endl;

    for(int i = 0; i < allPos.size(); i++) {
      for(int j = i + 1; j < allPos.size(); j++) {
        int x1 = 0, y1 = 0;
        int x2 = allPos[i].first, y2 = allPos[i].second;
        int x3 = allPos[j].first, y3 = allPos[j].second;

        double perimeter = getPerimeter( x1, y1, x2, y2, x3, y3 );
        double area = getArea( x1, y1, x2, y2, x3, y3);

        if( abs( perimeter -  P ) < MIN_THRES && abs( area - A ) < MIN_THRES ) {
          result.push_back(0); result.push_back(0);
          result.push_back( x2 ); result.push_back( y2 );
          result.push_back( x3 ); result.push_back( y3 );
          return result;
        }
      }
    }

    return result;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, vector <int> p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    FindThePerfectTriangle *obj;
    vector <int> answer;
    obj = new FindThePerfectTriangle();
    clock_t startTime = clock();
    answer = obj->constructTriangle(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p2[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p2.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p2[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;

    {
    // ----- test 0 -----
    p0 = 6;
    p1 = 11;
    p2.clear() /*{}*/;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 1 -----
    p0 = 6;
    p1 = 12;
    int t2[] = {1,1,1,4,5,4};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    p0 = 37128;
    p1 = 882;
    int t2[] = {137,137,273,410,1,410};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    p0 = 12;
    p1 = 18;
    int t2[] = {1,1,4,5,1,9};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    p0 = 18096;
    p1 = 928;
    int t2[] = {1,1,1,88,417,88};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 5 -----
    p0 = 1000000;
    p1 = 1000;
    p2.clear() /*{}*/;
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 6 ----
    p0 = 46800;
    p1 = 1000;
    int t2[] = {121, 121, 313, 341, 1, 471};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
