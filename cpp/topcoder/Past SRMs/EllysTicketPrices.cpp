#include <bits/stdc++.h>
using namespace std;

#define roundz(x,d) ((floor(((x)*pow(10,d))+.5))/pow(10,d))

class EllysTicketPrices {
public:

    double getPrice(int N, vector <int> C, int target) {
        long long lo = 1, hi = (long long)1e10; long long mi = (lo + hi) / 2; int steps = 0;
        while (lo < hi && steps++ < 1e6 ) {
            mi = ( lo + hi ) >> 1;
            long long prev = mi;
            long long capital = mi;

            for (int c : C) {
                prev = (100 * prev + prev * c + 50) / 100;
                capital += prev;
            }

            if (capital >= N * target * 100)
                hi = mi;
            else
                lo = mi;
        }
        return (lo / 100.);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, int p2, bool hasAnswer, double p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << p2;
    cout << "]" << endl;
    EllysTicketPrices *obj;
    double answer;
    obj = new EllysTicketPrices();
    clock_t startTime = clock();
    answer = obj->getPrice(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    vector <int> p1;
    int p2;
    double p3;

    {
    // ----- test 0 -----
    p0 = 5;
    int t1[] = {-10,15,5,-20};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 180;
    p3 = 184.01;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }

    {
    // ----- test 1 -----
    p0 = 11;
    int t1[] = {5,16,17,-3,-10,20,20,14,2,0};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1337;
    p3 = 874.77;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    p0 = 2;
    int t1[] = {0};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 42;
    p3 = 42.0;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    p0 = 20;
    int t1[] = {30,-26,87,47,-39,25,-67,62,-38,68,-84,5,28,-20,50,-61,10,63,-71};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 392;
    p3 = 476.28;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    p0 = 50;
    int t1[] = {-60,61,17,86,56,27,9,41,-27,-36,57,-16,1,50,-55,-36,14,13,-93,14,18,25,62,-18,40,79,56,19,10,-55,-43,45,-43,-84,61,-64,41,-55,38,18,36,-43,79,33,87,19,-47,38,-56};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 8887;
    p3 = 9451.93;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
