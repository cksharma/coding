#include <bits/stdc++.h>
using namespace std;

class MagicNumbersAgain {
public:
	bool ok(long long n)
	{
		vector<int> v;
		while( n > 0 ) {
			v.push_back( (n % 10) );
			n /= 10;
		}
		reverse( v.begin(), v.end());
		for(int i = 1; i < v.size(); i += 2) {
			if( not(v[i] > v[i - 1]) ) return false;
		}
		for(int i = 2; i < v.size(); i += 2) {
			if( not( v[i] < v[i - 1])) return false;
		}
		return true;
	}
	int count(long long A, long long B) {
		int ans = 0;
		long long start = (long long)sqrt( A );
		long long end = ( long long )sqrt(B);
		if( start * start != A ) start++;

		for(long long i = start; i <= end; ++i) {
			long long me = i * i;
			if( ok(me )) ans++;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	MagicNumbersAgain *obj;
	int answer;
	obj = new MagicNumbersAgain();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	long long p0;
	long long p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 64ll;
	p2 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 50ll;
	p1 = 60ll;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 121ll;
	p1 = 121ll;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 5679ll;
	p1 = 1758030ll;
	p2 = 73;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 1304164ll;
	p1 = 2000000ll;
	p2 = 14;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
