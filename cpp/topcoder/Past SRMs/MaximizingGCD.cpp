#include <bits/stdc++.h>
using namespace std;

class MaximizingGCD {
public:

	set<long long> getFactors(long long sum) {
		set<long long> result;
		for(long long i = 1; i * i <= sum; ++i) {
			if(sum % i == 0) {
				result.insert( {i, sum / i} );
			}
		}
		return result;
	}

	bool ok(int gcd, vector<int>& v, unordered_map<int, int> mp ) {

		int taken = 0;
		for(int i = 0; i < v.size(); ++i) {
			int mee = v[i];
			for(int j = 0; j < v.size(); ++j) {
				if( i == j) continue;
				int him = v[j];

				int cnt = ( mee == him ) ? 1 : 0;
				if( mp[mee] > cnt && mp[him] > cnt && (mee + him) % gcd == 0 ) {
					taken += 2;
					mp[mee]--;
					mp[him]--;
				}
			}
		}
		return taken == v.size();
	}

	int maximumGCDPairing(vector <int> A) {
		long long sum = accumulate(A.begin(), A.end(), 0LL);
		set<long long> factors = getFactors( sum );

		unordered_map<int, int> mp;
		for(int item : A) mp[item]++;

		for(auto rit = factors.rbegin(); rit != factors.rend(); ++rit) {
			if( *rit > (long long) 2e9 ) continue;
			int num = (int)*rit;
			if( ok( num, A, mp ) ) {
				return num;
			}
		}
		return 1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	MaximizingGCD *obj;
	int answer;
	obj = new MaximizingGCD();
	clock_t startTime = clock();
	answer = obj->maximumGCDPairing(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {5,4,13,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {26,23};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 49;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {100,200,300,500,1100,700};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {46,78,133,92,1,23,29,67,43,111,3908,276,13,359,20,21};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16400;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
