#include <bits/stdc++.h>
using namespace std;

struct SpeedMoment {
    int speed_change;
    int moment;
};

class DriveTheCarEasy {
public:
    long long calculateDistance(int S, int N, vector <int> speed_changes, vector <int> moments) {
        long long ans = 0LL;

        vector<SpeedMoment> v;
        for(int i = 0; i < speed_changes.size(); ++i) {
            v.push_back( {speed_changes[i], moments[i]} );
        }
        auto compare = [&]( const SpeedMoment& lhs, const SpeedMoment& rhs) {
            return lhs.moment < rhs.moment;
        };
        sort( v.begin(), v.end(), compare );

        long long speed = 0;
        for(int i = 0; i < v.size(); ++i) {
            if( i == 0 ) { speed += v[i].speed_change; ans = speed; }
            else {
                long long delta = 1LL * ( v[i].moment - v[i - 1].moment ) * speed;
                ans = ans + delta + v[i].speed_change;
                speed += v[i].speed_change;
            }
        }

        if( v[v.size() -1 ].moment != S )
        {
            ans += 1LL* speed * ( S - v[v.size() - 1].moment );
        }

        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, long long p4) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}";
    cout << "]" << endl;
    DriveTheCarEasy *obj;
    long long answer;
    obj = new DriveTheCarEasy();
    clock_t startTime = clock();
    answer = obj->calculateDistance(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;
    vector <int> p3;
    long long p4;

    {
    // ----- test 0 -----
    p0 = 1000;
    p1 = 1;
    int t2[] = {1000};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {1};
            p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    p4 = 1000000ll;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 1 -----
    p0 = 5;
    p1 = 5;
    int t2[] = {1,2,3,4,5};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {1,2,3,4,5};
            p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    p4 = 35ll;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    p0 = 100;
    p1 = 5;
    int t2[] = {1,2,3,4,5};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {100,100,100,100,100};
            p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    p4 = 15ll;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    p0 = 1000000000;
    p1 = 3;
    int t2[] = {1000,1000,1000};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {3,2,1};
            p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    p4 = 2999999997000ll;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    p0 = 100;
    p1 = 10;
    int t2[] = {522,426,772,447,497,775,982,417,932,728};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {75,45,81,29,2,25,84,56,2,37};
            p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    p4 = 367474ll;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 5 -----
    p0 = 1000000000;
    p1 = 100;
    int t2[] = {857,918,679,340,868,940,593,991,355,431,757,934,676,221,922,511,467,691,835,965,221,501,325,302,896,489,607,432,968,475,84,694,354,409,643,951,420,607,167,438,986,483,806,858,553,554,325,279,327,832,200,658,992,467,958,600,473,775,770,718,807,898,530,569,384,913,315,334,392,8,962,850,61,588,980,890,747,740,469,516,7,299,163,571,455,590,427,342,239,875,258,377,428,455,653,768,307,878,368,882};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {189330739,802329211,303238506,492686568,125660016,839296263,492601449,191890310,782177068,818008580,160449218,840594328,797829355,501899080,545531545,350034067,470338674,533206504,31262034,677959980,846045895,346948152,506147731,816248153,37119022,215208399,189766466,137831502,47628333,409233792,888987010,87027328,421624712,871216480,509928121,14723492,569328197,807497925,537560717,889089200,846216104,76823620,242790881,792345559,632488502,70422962,26697435,992120464,499482549,736386595,940778720,306890639,1849130,672298989,331602581,206347466,149811929,316412581,927999455,441504628,673419335,198091552,599715811,441414148,80656954,110880114,233703686,209550382,214278326,936333553,989214957,989248231,954621185,909664305,887357564,988670052,922390943,901347593,528977370,817020443,81469525,101430412,801006699,99958976,458482217,770179343,91883220,87104584,8454496,269122601,483571449,667480040,926138238,897273517,774034433,359911957,94576456,741452977,171601999,723473541};
            p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    p4 = 29493629905568ll;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
