#include <bits/stdc++.h>

using namespace std;

class CentipedeSocks {
public:
    int fewestSocks(int C, int F, vector<int> sockCounts) {
        int cnt = 0;
        for (int item : sockCounts) cnt += item / F;
        if (cnt < C) return -1;

        int ans = 0;
        for (int i = 0; i < sockCounts.size(); ++i) {
            int MIN = std::min(sockCounts[i], F - 1);
            ans += MIN;
            sockCounts[i] -= MIN;
        }

        while (C > 0) {
            there:
            sort(sockCounts.rbegin(), sockCounts.rend());
            for (int i = 0; i < sockCounts.size();) {
                if (sockCounts[i] == 0) break;
                ans += 1;
                sockCounts[i] -= 1;
                --C;
                if (C == 0) break;
                else {
                    int MIN = std::min(sockCounts[i], F - 1);
                    sockCounts[i] -= MIN;
                    ans += MIN;
                    goto there;
                }
            }
        }
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector<int> p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}";
    cout << "]" << endl;
    CentipedeSocks *obj;
    int answer;
    obj = new CentipedeSocks();
    clock_t startTime = clock();
    answer = obj->fewestSocks(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}

int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector<int> p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = 1;
        p1 = 100;
        int t2[] = {1, 1, 1, 1, 100};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 104;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 1;
        p1 = 100;
        int t2[] = {40, 50, 60, 70};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = -1;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        p1 = 10;
        int t2[] = {12345};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 30;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 2;
        p1 = 3;
        int t2[] = {4, 4, 5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 10;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 23;
        p1 = 9;
        int t2[] = {215, 28, 69, 67, 2, 31, 260, 59, 11, 439, 189, 1, 53, 356, 8, 6, 3, 904, 385, 2, 45, 156, 109, 23,
                    389, 34, 207, 916};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 397;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
