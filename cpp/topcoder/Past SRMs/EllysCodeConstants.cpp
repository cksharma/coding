#include <bits/stdc++.h>
using namespace std;

class EllysCodeConstants {
public:

    bool isValid(int start, int end, const string& candidate) {
        for (int i = start; i < end; ++i) {
            char ch = candidate[i];
            if ( (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F') ) continue;
            return false;
        }
        return true;
    }

	string getLiteral(string candidate) {
        int n = candidate.size();
        for (int i = 0; i < n; ++i) {
            if (candidate[i] == 'O') candidate[i] = '0';
            else if ( candidate[i] == 'I') candidate[i] = '1';
            else if ( candidate[i] == 'Z') candidate[i] = '2';
            else if ( candidate[i] == 'S') candidate[i] = '5';
            else if ( candidate[i] == 'T') candidate[i] = '7';
        }

        vector<string> suffixes = {"L", "LL", "U", "UL", "ULL", "LU", "LLU"};
        int start = 0, end = candidate.size();

        for (string& suf : suffixes) {
            if (suf == candidate) return "";
            int l = suf.length();
            if (l > candidate.length()) continue;
            string substr = candidate.substr(n - l);
            if (suf == substr) end = n - l;
        }
        bool valid = isValid(start, end, candidate);
        return valid ? "0x" + candidate : "";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	EllysCodeConstants *obj;
	string answer;
	obj = new EllysCodeConstants();
	clock_t startTime = clock();
	answer = obj->getLiteral(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "DEADBEEF";
	p1 = "0xDEADBEEF";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "BABACECA";
	p1 = "0xBABACECA";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "TOPCODER";
	p1 = "";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "FLU";
	p1 = "0xFLU";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "FULL";
	p1 = "0xFULL";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "FALL";
	p1 = "0xFALL";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	p0 = "TASTEFUL";
	p1 = "0x7A57EFUL";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 7 -----
	p0 = "OFFICIAL";
	p1 = "0x0FF1C1AL";
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 8 -----
	p0 = "OOZE";
	p1 = "0x002E";
	all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 9 -----
	p0 = "ESPRIT";
	p1 = "";
	all_right = KawigiEdit_RunTest(9, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 10 -----
	p0 = "COOL";
	p1 = "0xC00L";
	all_right = KawigiEdit_RunTest(10, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 11 -----
	p0 = "DISEASE";
	p1 = "0xD15EA5E";
	all_right = KawigiEdit_RunTest(11, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 12 -----
	p0 = "SOLVED";
	p1 = "";
	all_right = KawigiEdit_RunTest(12, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
