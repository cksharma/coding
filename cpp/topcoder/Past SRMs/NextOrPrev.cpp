#include <bits/stdc++.h>
using namespace std;
class NextOrPrev {
public:
	int getMinimum(int nextCost, int prevCost, string start, string goal) {
		int ans = 0;
		for (int i = 0; i < start.length(); ++i) {
		    char f = start[i];
		    char s = goal[i];
		    int lf = 0, ls = 0;
		    for (int j = 0; j < i; ++j) {
		        if (start[j] < f) lf++;
		        if (goal[j] < s) ls++;
		    }
		    if (lf != ls) return -1;
		    if (f == s) continue;
		    if (f < s) ans += (s - f) * nextCost;
		    else ans += (f - s) * prevCost;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, string p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"" << "," << "\"" << p3 << "\"";
	cout << "]" << endl;
	NextOrPrev *obj;
	int answer;
	obj = new NextOrPrev();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	string p2;
	string p3;
	int p4;

	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 8;
	p2 = "ae";
	p3 = "bc";
	p4 = 21;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 8;
	p2 = "ae";
	p3 = "cb";
	p4 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 1;
	p2 = "srm";
	p3 = "srm";
	p4 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 1;
	p2 = "acb";
	p3 = "bdc";
	p4 = 30;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 1;
	p2 = "zyxw";
	p3 = "vuts";
	p4 = 16;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = 563;
	p1 = 440;
	p2 = "ptrbgcnlaizo";
	p3 = "rtscedkiahul";
	p4 = 10295;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	p0 = 126;
	p1 = 311;
	p2 = "yovlkwpjgsna";
	p3 = "zpwnkytjisob";
	p4 = -1;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
