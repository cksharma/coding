#include <bits/stdc++.h>
using namespace std;

class EllysAndXor {
public:

    int compute(const vector<int>& numbers, const set<int>& XOR) {
        int result = numbers[0];
        for (int i = 1; i < numbers.size(); ++i) {
            if (XOR.find(i - 1) != XOR.end()) {
                result ^= numbers[i];
            } else {
                result &= numbers[i];
            }
        }
        return result;
    }

	int getMax(vector <int> numbers) {
        int ans = INT_MIN;

        int n = numbers.size();
        for (int i = 1; i < (1 << n); ++i) {
            set<int> XOR;
            for (int j = 0; j < n; ++j) {
                if ( (i & (1 << j)) != 0) {
                    XOR.insert(j);
                }
            }
            ans = max(ans, compute(numbers, XOR));
        }

        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysAndXor *obj;
	int answer;
	obj = new EllysAndXor();
	clock_t startTime = clock();
	answer = obj->getMax(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {42,27,38};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 44;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {666,133,438,123,893,674,462,209};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 976;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {42};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 42;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {123,456,789,987,654,321};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 975;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {42,13,17,666,811,314,1,5,2,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1007;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

    {
        // ----- test 5 -----
        int t0[] = {42};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 =42;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        int t0[] = {10, 15};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 =10;
        all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 =42;
        all_right = KawigiEdit_RunTest(7, p0, false, p1) && all_right;
        // ------------------
    }

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
