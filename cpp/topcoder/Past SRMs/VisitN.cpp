#include <bits/stdc++.h>
using namespace std;

class VisitN {
public:
	string visit(int n, int r, int c) {
		string ans = "";
		set<pair<int, int>> visited;
		visited.insert({r, c});
		for (int u = r - 1; u >= 0 && visited.size() < n; --u) {
            visited.insert({u, c});
            ans += "N";
		}
		for (int l = c - 1; l >= 0 && visited.size() < n; --l) {
            visited.insert({0, l});
            ans += "W";
		}

		for (int i = 0; i < 30 && visited.size() < n; ++i) {
		    if (i != 0) {
                ans += "S";
                if (i % 2 == 1) {
                    visited.insert({i, 29});
                } else {
                    visited.insert({i, 0});
                }
            }
		    if (i % 2 == 0) {
                for (int j = 1; j < 30 && visited.size() < n; ++j) {
                    visited.insert({i, j});
                    ans += "E";
                }
            }
		    else{
                for (int j = 28; j >= 0 && visited.size() < n; --j) {
                    visited.insert({i, j});
                    ans += "W";
                }
		    }
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	VisitN *obj;
	string answer;
	obj = new VisitN();
	clock_t startTime = clock();
	answer = obj->visit(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	string p3;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 4;
	p2 = 7;
	p3 = "";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 4;
	p2 = 7;
	p3 = "N";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 0;
	p2 = 17;
	p3 = "W";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 1;
	p2 = 1;
	p3 = "NWEE";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 5;
	p2 = 13;
	p3 = "NWSSEENNSSWS";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
