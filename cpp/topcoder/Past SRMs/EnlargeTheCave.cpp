#include <bits/stdc++.h>
using namespace std;

array<int, 4> dx = {-1, 0, 1, 0};
array<int, 4> dy = {0, -1, 0, 1};

class EnlargeTheCave {
public:

	void fill(int x, int y, int& cnt, int& desiredArea,
			  vector<string>& ans, vector<string>& cave, vector<vector<bool>>& can_go) {

		if (cnt >= desiredArea) return;
		for (int s = 0; s < dx.size(); ++s) {
		    if (cnt >= desiredArea) return;
			int r = x + dx[s];
			int c = y + dy[s];
			if (r < 0 || r >=cave.size() || c < 0 || c >= cave[0].size() || can_go[r][c] == false) continue;
			if (cave[r][c] == '#') ++cnt;
			can_go[x][y] = false;
			ans[r][c] = '.'; cave[r][c] = '.';
			fill(r, c, cnt, desiredArea, ans, cave, can_go);
		}
	}

	vector <string> enlarge(vector <string> cave, int desiredArea) {
		vector<string> ans = cave;
		int cnt = 0, x = -1, y = -1;
		int n = cave.size(); int m = cave[0].size();
		vector<vector<bool>> can_go(n, vector<bool>(m, true));
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (cave[i][j] == 'K') {
				    can_go[i][j] = false;
					for (int s = 0; s < dx.size(); ++s) {
						int r = i + dx[s];
						int c = j + dy[s];
						if (r < 0 || r >= n || c < 0 || c >= m) continue;
						can_go[r][c] = false;
					}
				}
				if (cave[i][j] == '.') {
					++cnt;
					if (x == -1) {
						x = i; y = j;
					}
				}
			}
		}

		fill(x, y, cnt, desiredArea, ans, cave, can_go);

		return cnt == desiredArea ? ans : vector<string>();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	EnlargeTheCave *obj;
	vector <string> answer;
	obj = new EnlargeTheCave();
	clock_t startTime = clock();
	answer = obj->enlarge(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	vector <string> p2;

	{
	// ----- test 0 -----
	string t0[] = {".##","###","###"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	string t2[] = {"...","..#","..#"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {".##","##K","###"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	string t2[] = {"..#",".#K","..#"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {".##","##K","###"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"###K########","#.#K########","..#K########","############"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"###############","###############","##K###..####K##","######..#######","###############","##K#########K##","###############","###############"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 82;
	string t2[] = {"...............","..#.........#..",".#K#.......#K##","###.........###","###.........###","##K#.......#K##","###.........###","#............##"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"#K#K###..###K#K##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	string t2[] = {"#K#K#......#K#K##"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	string t0[] = {"....","....","...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	string t2[] = {"....","....","...."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
