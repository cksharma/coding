#include <bits/stdc++.h>

using namespace std;


ostream& operator<<(ostream& os, const vector<int>& v) {
	for (int item : v) os << item << ", ";
	return os;
}

class MemoryGame {
public:
	long long countSteps(int N, int seed) {
		vector<int> location(2 * N);
		for (int i = 0; i <= 2*N-1; ++i) location[i] = i / 2;

		long long state = seed;
		for (int i = 2 * N - 1; i >= 1; --i) {
			int j = state % (i+1);
			swap( location[i], location[j] );
			state = (state * 1103515245 + 12345) % (1LL << 31);
		}

		unordered_map<int, int> mp;
		int index = 0; int steps = 0;
		while (index < 2 * N) {
			int a = location[index];
			mp[a]++;
			if (mp[a] > 1) {
				mp[a] -= 2;
				++steps;
				index += 1;
				continue;
			}
			int b = location[index + 1];
			mp[b]++;
		
			if ( a == b) {
				++steps;
				mp[a] -= 2;
				index += 2;
				continue;
			}
			
			if (mp[b] > 1) {
				mp[b] -= 2;
				++steps;
				//cout << "[" << b << ", " << b << "], ";
			}
			++steps;
			//cout << "[" << a << ", " << b << "], ";
			index += 2;
		}
		
		return steps;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	MemoryGame *obj;
	long long answer;
	obj = new MemoryGame();
	clock_t startTime = clock();
	answer = obj->countSteps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 47;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 47474747;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 42;
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 123456;
	p2 = 12ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100;
	p1 = 100;
	p2 = 166ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
