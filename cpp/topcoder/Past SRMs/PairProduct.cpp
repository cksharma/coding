#include <bits/stdc++.h>
using namespace std;

class PairProduct {
public:

    vector <int> findPair(int n, int a0, int step, long long p) {
        vector<long long> arr(n);
        map<long long, vector<long long>> mp;

        arr[0] = a0;
        mp[arr[0]].push_back(0);
        for (int i = 1; i < n; ++i) {
            arr[i] = arr[i - 1] + step;
            mp[arr[i]].push_back(i);
        }

        vector<int> res;
        for (auto& pa : mp) {
            auto& k = pa.first;
            auto& v = pa.second;
            if(k == 0) {
                if(p == 0) {
                    res.push_back(v[0]);res.push_back(v[0]);
                    break;
                }
            }
            else if (p % k == 0) {
                long long next = p / k;
                if( mp.find(next) != mp.end()) {
                    res.push_back(v[0]);
                    res.push_back(mp[next][0]);
                    if (res[0] > res[1]) swap(res[0], res[1]);
                    break;
                }
            }
        }
        for (int k = 4; k <= 4; ++k) {
            vector<int> v = {9, 7, 3, 1, 6, 5, 8, 4, 2};
            int index = findKthSmallest(v, 0, v.size() - 1, k - 1);
            cout << k << "th smallest element is " << v[index] << endl;
        }
        return res;
    }

    int partition(vector<int>& v, int start, int end) {
        int left = start, right = end; int pvt = v[start];
        while (left < right ) {
            for (; left < end && v[left] <= pvt; ) left++;
            for (; right >= 0 && v[right] > pvt; ) right--;
            if (left < right) swap(v[left], v[right]);
        }
        swap(v[start], v[right]);
        return left;
    }

    int findKthSmallest(vector<int>& v, int start, int end, int k) {
        if ((start == end)) return start;

        int pivot = partition(v, start, end);

        if (ok(v, pivot)) {
            cout << "THIS IS OKAY" << endl;
        } else {
            cout << "THERE IS BUG IN CODE" << endl;
        }

        if (pivot - start == k) return pivot;

        if (pivot - start > k) {
            return findKthSmallest(v, start, pivot - 1, k);
        } else {
            return findKthSmallest(v, pivot + 1, end, k - pivot + start);
        }
    }

    bool ok(vector<int> v, int pivot) {
        int element = v[pivot];
        sort(v.begin(), v.end());
        return v[pivot] == element;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, long long p3, bool hasAnswer, vector <int> p4) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
    cout << "]" << endl;
    PairProduct *obj;
    vector <int> answer;
    obj = new PairProduct();
    clock_t startTime = clock();
    answer = obj->findPair(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p4.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p4[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p4.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p4[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    long long p3;
    vector <int> p4;

    {
    // ----- test 0 -----
    p0 = 6;
    p1 = 2;
    p2 = 5;
    p3 = 14ll;
    int t4[] = {0,1};
            p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 1 -----
    p0 = 6;
    p1 = 2;
    p2 = 5;
    p3 = 144ll;
    int t4[] = {2,2};
            p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    p0 = 6;
    p1 = 2;
    p2 = 5;
    p3 = 47ll;
    p4.clear() /*{}*/;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    p0 = 6;
    p1 = -200000;
    p2 = -500000;
    p3 = 2040000000000ll;
    int t4[] = {2,3};
            p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    p0 = 20;
    p1 = -5;
    p2 = 1;
    p3 = -6ll;
    int t4[] = {2,7};
            p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
