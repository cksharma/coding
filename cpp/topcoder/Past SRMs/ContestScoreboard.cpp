#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <unordered_set>

using namespace std;
using ll = long long;

struct Contest {
	string team;
	vector<pair<ll, ll>> scoreTime;
	
	Contest(const string& _team, const vector<pair<ll, ll>>& _scoreTime) {
		this->team = _team;
		this->scoreTime = _scoreTime;
	}
};

ostream& operator<<(ostream& os, const Contest& c) {
	os << "[" << c.team << ", ";
	for (auto p : c.scoreTime) {
		os << "(" << p.first << ", " << p.second << ")";
	}
	os << "]";
	return os;
}

class ContestScoreboard {
public:

	int getWinner(const vector<Contest>& input, int tm) {
		int idx = -1;
		string team = "}}}}}}}}}}";
		ll maxScore = 0LL;
		
		for (int i = 0; i < input.size(); ++i) {
			string ipTeam = input[i].team;
			const vector<pair<ll, ll>>& scoreTime = input[i].scoreTime;
			ll sum = 0;
			for (const pair<ll, ll>& p : scoreTime) {
				if (p.second < tm) sum += p.first;
			}
			
			if (sum > maxScore || (sum == maxScore && ipTeam < team)) {
				idx = i;
				team = ipTeam;
				maxScore = sum;
			}
		}
		
		return idx;
	}
	
	vector <int> findWinner(vector <string> scores) {
		vector<Contest> input;
		unordered_set<int> st;
		for (auto& score : scores) {
			for (int i = 0; i < score.length(); ++i) if (score[i] == '/') score[i] = ' ';
			stringstream ss(score);
			string team;
			ss >> team;
			vector<pair<ll, ll>> scoreTime;
			ll _score; ll _time;
			while (ss >> _score) {
				ss >> _time;
				scoreTime.emplace_back(_score, _time);				
				st.insert(_time);
				st.insert(_time + 1);
				if (_time > 1) st.insert(_time - 1);
			}
			input.emplace_back(team, scoreTime);
			//cout << input.back() << endl;
		}
		
		vector<int> ans(scores.size(), 0);
		for (int tm : st) {
			int i = getWinner(input, tm);
			ans[i] = 1;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ContestScoreboard *obj;
	vector <int> answer;
	obj = new ContestScoreboard();
	clock_t startTime = clock();
	answer = obj->findWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"TVG 1/1 1/2 1/3","AJI 1/4 1/5 1/6"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"GLP 1/114 1/195 1/171 1/19 1/146 1/29","BKPF 1/57 1/187 1/277 1/21 1/223 1/35"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"AAA 248/2 495/5 993/7","BBB 244/6 493/7 990/10","CCC 248/2 495/5 993/10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"UBA 10/2 30/4 25/3 999/1000","UNC 1/3 3/20 40/50","UNLP 2/2 3/3 4/4 100/100","UNR 999/1000000 999/999999","UNS 999/100000000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0,1,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
