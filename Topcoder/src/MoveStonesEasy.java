import java.util.Arrays;

public class MoveStonesEasy {

    public int get(int[] a, int[] b) {
        int ans = 0;
        int sumA = Arrays.stream(a).sum();
        int sumB = Arrays.stream(b).sum();
        if (sumA != sumB) return -1;

        for (int i = 0; i < a.length; i++) {
            if (a[i] == b[i]) continue;

            int extra = Math.abs(a[i] - b[i]);

            if (a[i] > b[i]) {

                for (int j = i - 1; j >= 0 && extra > 0; j--) {
                    if (a[j] < b[j]) {
                        int needed = b[j] - a[j];
                        if (needed <= extra) {
                            extra = extra - needed;
                            ans += (i - j) * needed;
                            a[j] = b[j];
                        } else {
                            ans += (i - j) * extra;
                            a[j] = a[j] + extra;
                            extra = 0;
                        }
                    }
                }

                for (int j = i + 1; extra > 0 && j < a.length; j++) {
                    if (a[j] < b[j]) {
                        int needed = b[j] - a[j];
                        if (needed <= extra) {
                            extra = extra - needed;
                            ans += (j - i) * needed;
                            a[j] = b[j];
                        } else {
                            ans += (j - i) * extra;
                            a[j] = a[j] + extra;
                            extra = 0;
                        }
                    }
                }
            }
        }

        return ans;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit-pf 2.3.0
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        MoveStonesEasy obj;
        int answer;
        obj = new MoveStonesEasy();
        long startTime = System.currentTimeMillis();
        answer = obj.get(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        boolean disabled;
        boolean tests_disabled;
        all_right = true;
        tests_disabled = false;

        int[] p0;
        int[] p1;
        int p2;

        // ----- test 0 -----
        disabled = false;
        p0 = new int[]{1, 2};
        p1 = new int[]{2, 1};
        p2 = 1;
        all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 1 -----
        disabled = false;
        p0 = new int[]{10, 0};
        p1 = new int[]{0, 10};
        p2 = 10;
        all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 2 -----
        disabled = false;
        p0 = new int[]{0, 0, 1};
        p1 = new int[]{1, 0, 0};
        p2 = 2;
        all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 3 -----
        disabled = false;
        p0 = new int[]{12, 12};
        p1 = new int[]{12, 12};
        p2 = 0;
        all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 4 -----
        disabled = false;
        p0 = new int[]{5};
        p1 = new int[]{6};
        p2 = -1;
        all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 5 -----
        disabled = false;
        p0 = new int[]{3, 10, 0, 4, 0, 0, 0, 1, 0};
        p1 = new int[]{5, 5, 0, 7, 0, 0, 0, 0, 1};
        p2 = 9;
        all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        if (all_right) {
            if (tests_disabled) {
                System.out.println("You're a stud (but some test cases were disabled)!");
            } else {
                System.out.println("You're a stud (at least on given cases)!");
            }
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
