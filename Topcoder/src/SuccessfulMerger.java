import java.util.*;

public class SuccessfulMerger {


    Map<Integer, Set<Integer>> graph;

    public int minimumMergers(int[] road) {
        this.graph = new HashMap<>();

        for (int i = 0; i < road.length; i++) {
            int me = i;
            int he = road[i];

            Set<Integer> mySet = graph.get(me) == null ? new HashSet<>() : graph.get(me);
            mySet.add(he);
            graph.put(me, mySet);

            Set<Integer> heSet = graph.get(he) == null ? new HashSet<>() : graph.get(he);
            heSet.add(me);
            graph.put(he, heSet);
        }
        int ans = 1;
        for (int id : graph.keySet()) {
            Set<Integer> visited = new HashSet<>();
            int[] arr = new int[1];
            dfs(id, visited, arr, 0);
            ans = Math.max(ans, arr[0]);
        }
        return ans - 1;
    }

    private void dfs(int id, Set<Integer> visited, int[] arr, int steps) {
        arr[0] = Math.max(arr[0], steps);
        if (visited.contains(id)) return;
        visited.add(id);
        for (int neighbour : graph.get(id)) {
            if (visited.contains(neighbour)) continue;
            if (graph.get(neighbour).size() > 1)
                dfs(neighbour, visited, arr, steps + 1);
        }
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit-pf 2.3.0
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        SuccessfulMerger obj;
        int answer;
        obj = new SuccessfulMerger();
        long startTime = System.currentTimeMillis();
        answer = obj.minimumMergers(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        boolean disabled;
        boolean tests_disabled;
        all_right = true;
        tests_disabled = false;

        int[] p0;
        int p1;

        // ----- test 0 -----
        disabled = false;
        p0 = new int[]{2, 2, 1, 1, 1};
        p1 = 1;
        all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 1 -----
        disabled = false;
        p0 = new int[]{3, 4, 5, 4, 5, 3};
        p1 = 2;
        all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 2 -----
        disabled = false;
        p0 = new int[]{1, 0, 1, 0, 0, 0, 1, 0, 1, 1};
        p1 = 1;
        all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 3 -----
        disabled = false;
        p0 = new int[]{1, 2, 3, 0};
        p1 = 2;
        all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 4 -----
        disabled = false;
        p0 = new int[]{31, 19, 0, 15, 30, 32, 15, 24, 0, 20, 40, 1, 22, 21, 39, 28, 0, 23, 15, 5, 19, 22, 6, 32, 8, 38, 35, 30, 4, 28, 32, 18, 18, 9, 22, 41, 20, 18, 6, 25, 41, 34, 4};
        p1 = 25;
        all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 5 -----
        disabled = false;
        p0 = new int[]{1, 0};
        p1 = 0;
        all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        if (all_right) {
            if (tests_disabled) {
                System.out.println("You're a stud (but some test cases were disabled)!");
            } else {
                System.out.println("You're a stud (at least on given cases)!");
            }
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
