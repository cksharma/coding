#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>		
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TheGridDivTwo {
public:
	int find(vector <int> x, vector <int> y, int k) {
		queue <pair<pair<int, int>, int>> Q;
		set <pair <int, int>> visited;
		for (int i = 0; i < x.size(); i++) {
			visited.insert(make_pair(x[i], y[i]));
		}
		
		int ans = 0;
		Q.push(make_pair(make_pair(0, 0), 0));
		while (Q.size() != 0) {
			pair <pair<int, int>, int> p = Q.front();
			Q.pop();
			int x1 = p.first.first;
			int y1 = p.first.second;
			int s = p.second;
			ans = max(ans, x1);

			if (x1 + 100 < ans || s == k || visited.find(make_pair(x1, y1)) != visited.end())
				continue;
			pair <pair<int, int>, int> east = make_pair(make_pair(x1 + 1, y1), s + 1);
			pair <pair<int, int>, int> north = make_pair(make_pair(x1, y1 + 1), s + 1);
			pair <pair<int, int>, int> south = make_pair(make_pair(x1, y1 - 1), s + 1);
			pair <pair<int, int>, int> west = make_pair(make_pair(x1 - 1, y1), s + 1);

			if (visited.find(make_pair(x1 + 1, y1)) == visited.end()) Q.push(east);
			if (visited.find(make_pair(x1, y1 + 1)) == visited.end()) Q.push(north);
			if (visited.find(make_pair(x1, y1 - 1)) == visited.end()) Q.push(south);
			if (visited.find(make_pair(x1 - 1, y1)) == visited.end()) Q.push(west);

			visited.insert(make_pair(x1, y1));
		}
				
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	TheGridDivTwo *obj;
	int answer;
	obj = new TheGridDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,1,1,1};
	p1 = {-2,-1,0,1};
	p2 = 4;
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {-1,0,0,1};
	p1 = {0,-1,1,0};
	p2 = 9;
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {};
	p1 = {};
	p2 = 1000;
	p3 = 1000;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,0,0,-1,-1,-2,-2,-3,-3,-4,-4};
	p1 = {0,-1,1,-2,2,-3,3,-4,4,-5,5};
	p2 = 47;
	p3 = 31;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
