import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class RobotOnMoon {
	private static class State {
		Set <Character> exitSet = new HashSet <>();
		int count;
		boolean visited;
		int x;
		int y;
	}

	public int longestSafeCommand(String[] board) {
		int ans = 0;
		int x = 0, y = 0;
		State[][] state = new State[board.length][board[0].length()];
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length(); j++) {
				state[i][j] = new State();
				if (board[i].charAt(j) == 'S') {
					x = i;
					y = j;
				}
			}
		}
		
		Queue <State> queue = new LinkedList <>();
		queue.add(state[x][y]);
		state[x][y].visited = true;
		state[x][y].x = x;
		state[x][y].y = y;
		
		while (queue.isEmpty() == false) {
			State st = queue.poll();
			x = st.x;
			y = st.y;
			int count = st.count;
			
			if (x == 0) st.exitSet.add('U');
			if (x == board.length - 1) st.exitSet.add('R');
			if (y == 0) st.exitSet.add('L');
			if (y == board[0].length() - 1) st.exitSet.add('D');
			
			if (x + 1 < board.length && board[x + 1].charAt(y) == '.' && state[x + 1][y].visited == false) {
				queue.add(state[x + 1][y]);
				state[x + 1][y].x = x + 1;
				state[x + 1][y].y = y;
				state[x + 1][y].visited = true;
				state[x + 1][y].count = count + 1;
				state[x + 1][y].exitSet.addAll(st.exitSet);
			}
			if (x - 1 >= 0 && board[x - 1].charAt(y) == '.' && state[x - 1][y].visited == false) {
				queue.add(state[x - 1][y]);
				state[x - 1][y].x = x - 1;
				state[x - 1][y].y = y;
				state[x - 1][y].visited = true;
				state[x - 1][y].count = count + 1;
				state[x - 1][y].exitSet.addAll(st.exitSet);
			}
			if (y + 1 < board[0].length() && board[x].charAt(y + 1) == '.' && state[x][y + 1].visited == false) {
				queue.add(state[x][y + 1]);
				state[x][y + 1].x = x;
				state[x][y + 1].y = y + 1;
				state[x][y + 1].visited = true;
				state[x][y + 1].count = count + 1;
				state[x][y + 1].exitSet.addAll(st.exitSet);
			}
			if (y - 1 >= 0 && board[x].charAt(y - 1) == '.' && state[x][y - 1].visited == false) {
				queue.add(state[x][y - 1]);
				state[x][y - 1].x = x;
				state[x][y - 1].y = y - 1;
				state[x][y - 1].visited = true;
				state[x][y - 1].count = count + 1;
				state[x][y - 1].exitSet.addAll(st.exitSet);
			}
		}
		
		Set <Character> set = new HashSet <>();
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length(); j++) {
				State st = state[i][j];
				set.addAll(st.exitSet);
				ans = Math.max(ans, st.count);
				//System.out.println(set);
			}
		}
		
		if (set.size() != 4) return -1;
		return ans;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		RobotOnMoon obj;
		int answer;
		obj = new RobotOnMoon();
		long startTime = System.currentTimeMillis();
		answer = obj.longestSafeCommand(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;

		String[] p0;
		int p1;

		// ----- test 0 -----
		disabled = false;
		p0 = new String[] { "#####", "#...#", "#.S.#", "#...#", "#####" };
		p1 = -1;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 1 -----
		disabled = false;
		p0 = new String[] { "S......" };
		p1 = 6;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 2 -----
		disabled = false;
		p0 = new String[] { "#.######", "#.#..S.#", "#.#.##.#", "#......#", "########" };
		p1 = -1;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 3 -----
		disabled = false;
		p0 = new String[] { "S" };
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

// Powered by KawigiEdit-pf 2.3.0!
