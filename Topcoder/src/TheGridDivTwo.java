import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class TheGridDivTwo {
	static class Points {
		int x;
		int y;
		int sec;

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + x;
			result = prime * result + y;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			Points p = (Points) obj;
			return p.x == x && p.y == y;
		}

		public Points(int x, int y, int sec) {
			super();
			this.x = x;
			this.y = y;
			this.sec = sec;
		}
	}

	public int find(int[] x, int[] y, int k) {
		int ans = 0;
		Queue<Points> queue = new LinkedList<>();
		Set<Points> visited = new HashSet<>();
		for (int i = 0; i < x.length; i++) {
			visited.add(new Points(x[i], y[i], 0));
		}
		queue.add(new Points(0, 0, 0));
		while (queue.isEmpty() == false) {
			Points p = queue.poll();
			int x1 = p.x;
			int y1 = p.y;
			int sec = p.sec;
			
			ans = Math.max(x1, ans);
			
			if (sec >= k || x1 + 100 < sec || visited.contains(p)) continue;
			
			Points east = new Points(x1 + 1, y1, sec + 1);
			Points north = new Points(x1, y1 + 1, sec + 1);
			Points south = new Points(x1, y1 - 1, sec + 1);
			Points west = new Points(x1 - 1, y1, sec + 1);

			if (!visited.contains(east)) queue.add(east);			
			if (!visited.contains(north)) queue.add(north);			
			if (!visited.contains(south)) queue.add(south);			
			if (!visited.contains(west)) queue.add(west);
			
			visited.add(p);
		}
		return ans;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		TheGridDivTwo obj;
		int answer;
		obj = new TheGridDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.find(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;

		int[] p0;
		int[] p1;
		int p2;
		int p3;

		// ----- test 0 -----
		disabled = false;
		p0 = new int[] { 1, 1, 1, 1 };
		p1 = new int[] { -2, -1, 0, 1 };
		p2 = 4;
		p3 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 1 -----
		disabled = false;
		p0 = new int[] { -1, 0, 0, 1 };
		p1 = new int[] { 0, -1, 1, 0 };
		p2 = 9;
		p3 = 0;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 2 -----
		disabled = false;
		p0 = new int[] {};
		p1 = new int[] {};
		p2 = 1000;
		p3 = 1000;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 3 -----
		disabled = false;
		p0 = new int[] { 1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4 };
		p1 = new int[] { 0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5 };
		p2 = 47;
		p3 = 31;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

// Powered by KawigiEdit-pf 2.3.0!
