package pastchallenges;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class BearChairs {
    public int[] findPositions(int[] atLeast, int d) {
        List<Integer> arr = new ArrayList<>();
        arr.add(atLeast[0]);
        int[] ans = new int[atLeast.length];
        ans[0] = atLeast[0];
        for (int i = 1; i < atLeast.length; i++) {
            if (canPutAsIs(arr, atLeast[i], d)) {
                arr.add(atLeast[i]);
                ans[i] = atLeast[i];
            } else {
                int tableNo = getTableNumber(arr, atLeast[i], d);
                arr.add(tableNo);
                ans[i] = tableNo;
            }
            Collections.sort(arr);
        }
        return ans;
    }

    private boolean canPutAsIs(List<Integer> arr, int tableNo, int d) {
        if (tableNo + d <= arr.get(0)) return true;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) + d <= tableNo &&  (i == arr.size() - 1 || arr.get(i + 1) - d >= tableNo)) return true;
        }
        return false;
    }

    private int getTableNumber(List<Integer> arr, int tableNo, int d) {
        for (int i = 0; i < arr.size() - 1; i++) {
            int no = arr.get(i) + d;
            if (arr.get(i + 1) - d >= no && no >= tableNo) return no;
        }
        return arr.get(arr.size() - 1) + d;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit-pf 2.3.0
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int[] p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + p1);
        System.out.println("]");
        BearChairs obj;
        int[] answer;
        obj = new BearChairs();
        long startTime = System.currentTimeMillis();
        answer = obj.findPositions(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p2.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p2[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p2.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p2[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        boolean disabled;
        boolean tests_disabled;
        all_right = true;
        tests_disabled = false;

        int[] p0;
        int p1;
        int[] p2;

        // ----- test 0 -----
        disabled = false;
        p0 = new int[]{1, 21, 11, 7};
        p1 = 10;
        p2 = new int[]{1, 21, 11, 31};
        all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 1 -----
        disabled = false;
        p0 = new int[]{1, 21, 11, 7};
        p1 = 11;
        p2 = new int[]{1, 21, 32, 43};
        all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 2 -----
        disabled = false;
        p0 = new int[]{1000000, 1000000, 1000000, 1};
        p1 = 1000000;
        p2 = new int[]{1000000, 2000000, 3000000, 4000000};
        all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 3 -----
        disabled = false;
        p0 = new int[]{1000000, 1000000, 1000000, 1};
        p1 = 999999;
        p2 = new int[]{1000000, 1999999, 2999998, 1};
        all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        if (all_right) {
            if (tests_disabled) {
                System.out.println("You're a stud (but some test cases were disabled)!");
            } else {
                System.out.println("You're a stud (at least on given cases)!");
            }
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
