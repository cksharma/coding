package pastchallenges;

import java.util.Set;
import java.util.TreeSet;

public class ContestScoreboard {

    public int[] findWinner(String[] scores) {
        int[] winner = new int[scores.length];
        Set<Integer> times = getAllTimes(scores);
        for (int time : times) {
            int index = getWinner(scores, time);
            winner[index] = 1;
        }
        return winner;
    }

    private int getWinner(String[] scores, int time) {
        int index = -1;
        int maxScore = 0;
        String teamName = "}}}}";

        for (int j = 0; j < scores.length; j++) {
            String score = scores[j];
            String[] arr = score.split("\\s+");
            String tempName = arr[0];
            int tempScore = 0;
            for (int i = 1; i < arr.length; i++) {
                String[] ss = arr[i].split("/");
                int sc = Integer.parseInt(ss[0]);
                int tm = Integer.parseInt(ss[1]);
                if (tm < time) tempScore += sc;
            }
            if (tempScore > maxScore || (tempScore == maxScore && tempName.compareTo(teamName) < 0)) {
                index = j;
                maxScore = tempScore;
                teamName = tempName;
            }
        }

        return index;
    }

    private Set<Integer> getAllTimes(String[] scores) {
        Set<Integer> time = new TreeSet<>();
        for (String score : scores) {
            String[] arr = score.split("\\s+");
            for (int i = 1; i < arr.length; i++) {
                int t = Integer.parseInt(arr[i].split("/")[1]);
                time.add(t);
                if (t > 1) time.add(t - 1);
                time.add(t + 1);
            }
        }
        return time;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit-pf 2.3.0
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int[] p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        ContestScoreboard obj;
        int[] answer;
        obj = new ContestScoreboard();
        long startTime = System.currentTimeMillis();
        answer = obj.findWinner(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p1.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p1[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p1.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p1[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        boolean disabled;
        boolean tests_disabled;
        all_right = true;
        tests_disabled = false;

        String[] p0;
        int[] p1;

        // ----- test 0 -----
        disabled = false;
        p0 = new String[]{"TVG 1/1 1/2 1/3", "AJI 1/4 1/5 1/6"};
        p1 = new int[]{1, 1};
        all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 1 -----
        disabled = false;
        p0 = new String[]{"GLP 1/114 1/195 1/171 1/19 1/146 1/29", "BKPF 1/57 1/187 1/277 1/21 1/223 1/35"};
        p1 = new int[]{1, 1};
        all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 2 -----
        disabled = false;
        p0 = new String[]{"AAA 248/2 495/5 993/7", "BBB 244/6 493/7 990/10", "CCC 248/2 495/5 993/10"};
        p1 = new int[]{1, 0, 0};
        all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 3 -----
        disabled = false;
        p0 = new String[]{"UBA 10/2 30/4 25/3 999/1000", "UNC 1/3 3/20 40/50", "UNLP 2/2 3/3 4/4 100/100", "UNR 999/1000000 999/999999", "UNS 999/100000000"};
        p1 = new int[]{1, 0, 1, 1, 0};
        all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        if (all_right) {
            if (tests_disabled) {
                System.out.println("You're a stud (but some test cases were disabled)!");
            } else {
                System.out.println("You're a stud (at least on given cases)!");
            }
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
