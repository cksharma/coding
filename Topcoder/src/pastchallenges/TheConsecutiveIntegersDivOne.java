package pastchallenges;

import java.util.Arrays;


public class TheConsecutiveIntegersDivOne {
	public int find(int[] numbers, int k) {
		int ans = Integer.MAX_VALUE;
		Arrays.sort(numbers);
		for (int i = 0; i < numbers.length - k + 1; i++) {
			ans = Math.min(ans, solve(numbers, i, i + k));
		}
		return ans;
	}
	
	private int solve(int[] numbers, int start, int end) {
		int ans = Integer.MAX_VALUE;
		for (int mid = start; mid < end; mid++) {
			int cnt = 0;
			for (int i = start; i < end; i++) {
				int diff = Math.abs(mid - i);
				cnt += Math.abs(numbers[mid] - numbers[i]) - diff;
			}
			ans = Math.min(ans, cnt);
		}
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		TheConsecutiveIntegersDivOne obj;
		int answer;
		obj = new TheConsecutiveIntegersDivOne();
		long startTime = System.currentTimeMillis();
		answer = obj.find(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;

		int[] p0;
		int p1;
		int p2;

		// ----- test 0 -----
		disabled = false;
		p0 = new int[] { 4, 7, 47 };
		p1 = 2;
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 1 -----
		disabled = false;
		p0 = new int[] { 1, 100 };
		p1 = 1;
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 2 -----
		disabled = false;
		p0 = new int[] { -96, -53, 82, -24, 6, -75 };
		p1 = 2;
		p2 = 20;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 3 -----
		disabled = false;
		p0 = new int[] { 64, -31, -56 };
		p1 = 2;
		p2 = 24;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 4 -----
		disabled = false;
		p0 = new int[] { -96, -53, 82, -24, 6, -75 };
		p1 = 4;
		p2 = 90;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

// Powered by KawigiEdit-pf 2.3.0!
