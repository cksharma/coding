package pastchallenges;

import java.util.TreeMap;


public class TaroFillingAStringDiv1 {
	public static final int MD = 1000000007;
	public int getNumber(int N, int[] _position, String value) {
		
		TreeMap <Integer, Character> tmap = new TreeMap <>();
		for (int i = 0; i < value.length(); i++) 
			tmap.put(_position[i], value.charAt(i));
		int[] pos = new int[tmap.size()];
		char[] ch = new char[tmap.size()];
		int index = 0;
		for (int key:tmap.keySet()) {
			pos[index] = key;
			ch[index] = tmap.get(key);
			index++;
		}	
		long ans = 1;
		for (int i = 1; i < pos.length; i++) {
			int interval = pos[i] - pos[i - 1] - 1;
			if (ch[i - 1] == ch[i] && interval % 2 == 0)
				ans *= (interval + 1);
			if (ch[i - 1] != ch[i] && interval % 2 == 1)
				ans *= (interval + 1);
			ans %= MD;
		}
		return (int)ans;
	}
	

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, String p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "\"" + p2 + "\"");
		System.out.println("]");
		TaroFillingAStringDiv1 obj;
		int answer;
		obj = new TaroFillingAStringDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;

		int p0;
		int[] p1;
		String p2;
		int p3;

		// ----- test 0 -----
		disabled = false;
		p0 = 3;
		p1 = new int[] { 1, 3 };
		p2 = "AB";
		p3 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 1 -----
		disabled = false;
		p0 = 4;
		p1 = new int[] { 2, 1, 3, 4 };
		p2 = "ABBA";
		p3 = 1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 2 -----
		disabled = false;
		p0 = 25;
		p1 = new int[] { 23, 4, 8, 1, 24, 9, 16, 17, 6, 2, 25, 15, 14, 7, 13 };
		p2 = "ABBBBABABBAAABA";
		p3 = 1;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 3 -----
		disabled = false;
		p0 = 305;
		p1 = new int[] { 183, 115, 250, 1, 188, 193, 163, 221, 144, 191, 92, 192, 58, 215, 157, 187, 227, 177, 206, 15,
				272, 232, 49, 11, 178, 59, 189, 246 };
		p2 = "ABAABBABBAABABBBBAAAABBABBBA";
		p3 = 43068480;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3)) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

// Powered by KawigiEdit-pf 2.3.0!
