package pastchallenges;

public class BichromePainting {
    char[][] desired;
    char[][] initial;
    int k;

    public String isThatPossible(String[] board, int k) {
        desired = new char[board.length][board[0].length()];
        initial = new char[board.length][board[0].length()];
        for (int i = 0; i < board.length; i++) for (int j = 0; j < board[0].length(); j++) initial[i][j] = 'W';
        this.k = k;
        for (int i = 0; i < board.length; i++) desired[i] = board[i].toCharArray();
        solve();
        return areTheySame();
    }

    private String areTheySame() {
        for (int i = 0; i < desired.length; i++) {
            for (int j = 0; j < desired[0].length; j++) {
                if (desired[i][j] == initial[i][j]) continue;
                return "Impossible";
            }
        }
        return "Possible";
    }

    private void solve() {
        for (int i = 0; i < initial.length; i++) {
            for (int j = 0; j < initial.length; j++) {
                boolean flag = false;
                if ( initial[i][j] != desired[i][j]) {
                    paintBoard(i, j, k, desired[i][j]);
                    //System.out.println(i + " " + j);
                    //printBoard(initial);
                }
                else if (i == initial.length - k && j == initial.length - k) {
                    flag = shouldPaintOrNot(i, j, 3);
                } else if (i == initial.length - k) {
                    flag = shouldPaintOrNot(i, j, 1);
                } else if (j == initial.length - k) {
                    flag = shouldPaintOrNot(i, j, 2);
                }

                if (flag)
                    paintBoard(i, j, k, desired[i][j]);
            }
        }
    }

    private boolean shouldPaintOrNot(int x, int y, int condition) {
        int endX = x + k, endY = y + k;
        if (endX > initial.length || endY > initial.length) return false;

        switch(condition) {
            case 3:
                for (int i = x; i < x + k; i++) {
                    for (int j = y; j < y + k; j++) {
                        if (initial[i][j] != desired[i][j]) return true;
                    }
                }
                break;
            case 1:
                for (int i = x; i < x + k; i++)
                    if (initial[i][y] != desired[i][y]) return true;
                break;
            case 2:
                for (int j = y; j < y + k; j++)
                    if (initial[x][j] != desired[x][j]) return true;
                break;
        }
        return false;
    }


    private void printBoard(char[][] ch) {
        for (int i = 0; i < ch.length; i++) {
            for (int j = 0; j < ch.length; j++) {
                System.out.print(ch[i][j]);
            }
            System.out.println();
        }
    }

    private void paintBoard(int x, int y, int k, char c) {
        int endX = x + k, endY = y + k;
        if (endX > initial.length || endY > initial.length) return;

        for (int i = x; i < x + k; i++) {
            for (int j = y; j < y + k; j++) {
                initial[i][j] = c;
            }
        }
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit-pf 2.3.0
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, String p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}" + "," + p1);
        System.out.println("]");
        BichromePainting obj;
        String answer;
        obj = new BichromePainting();
        long startTime = System.currentTimeMillis(

        );
        answer = obj.isThatPossible(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p2 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p2);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        boolean disabled;
        boolean tests_disabled;
        all_right = true;
        tests_disabled = false;

        String[] p0;
        int p1;
        String p2;

        // ----- test 0 -----
        disabled = false;
        p0 = new String[]{"BBBW", "BWWW", "BWWW", "WWWW"};
        p1 = 3;
        p2 = "Possible";
        all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 1 -----
        disabled = false;
        p0 = new String[]{"BW", "WB"};
        p1 = 2;
        p2 = "Impossible";
        all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 2 -----
        disabled = false;
        p0 = new String[]{"BWBWBB", "WBWBBB", "BWBWBB", "WBWBBB", "BBBBBB", "BBBBBB"};
        p1 = 2;
        p2 = "Possible";
        all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 3 -----
        disabled = false;
        p0 = new String[]{"BWBWBB", "WBWBWB", "BWBWBB", "WBWBWB", "BWBWBB", "BBBBBB"};
        p1 = 2;
        p2 = "Impossible";
        all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 4 -----
        disabled = false;
        p0 = new String[]{"BWBWBB", "WBWBWB", "BWBWBB", "WBWBWB", "BWBWBB", "BBBBBB"};
        p1 = 1;
        p2 = "Possible";
        all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 5 -----
        disabled = false;
        p0 = new String[]{"BB", "BB"};
        p1 = 2;
        p2 = "Possible";
        all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------


        // ----- test 6 -----
        disabled = false;
        p0 = new String[]{"WBWBBBWBBWWBBBBWB", "BWWWBBWBWBWWBWBWB", "BBBBBBWBWBBWBBBBW", "WBBWBWBWWWBBBWBBB", "BWWBBBBBWBBWBBWWB", "BBBWBBBBBWBBWBBWW", "BWBWBBWBWBWBWBBWB", "BBWBWBWBBWBBWWBWW", "BBBWWWWWBWBWWBWBB", "WBBBWBBBBWBBWBWBB", "WBBWBBBWBBBWBWWWB", "BWBBBBWBBBWBBWWWW", "WWBWWWWWBBWWWBBBW", "BWWBWBBWBWBBWWWBB", "BBWWBBBWWWWBWBWWW", "BWBBBBBBWWWBWBWWB", "BBWWWBWBBBWWWWBWB"};
        p1 = 2;
        p2 = "Possible";
        all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        if (all_right) {
            if (tests_disabled) {
                System.out.println("You're a stud (but some test cases were disabled)!");
            } else {
                System.out.println("You're a stud (at least on given cases)!");
            }
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
