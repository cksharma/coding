!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BalancedBinaryTree	header.h	/^class BalancedBinaryTree {$/;"	c
BestTimeToBuyAndSellStock	header.h	/^class BestTimeToBuyAndSellStock {$/;"	c
BestTimeToBuyAndSellStockII	header.h	/^class BestTimeToBuyAndSellStockII {$/;"	c
ContainerWithMostWater	header.h	/^class ContainerWithMostWater {$/;"	c
ExcelSheetColumnTitle	header.h	/^class ExcelSheetColumnTitle {$/;"	c
GasStation	header.h	/^class GasStation {$/;"	c
GrayCode	header.h	/^class GrayCode {$/;"	c
IntersectionOfTwoLinkedLists	header.h	/^class IntersectionOfTwoLinkedLists {$/;"	c
LargestNumber	header.h	/^class LargestNumber {$/;"	c
LetterCombinationsOfAPhoneNumber	header.h	/^class LetterCombinationsOfAPhoneNumber {$/;"	c
ListNode	header.h	/^	ListNode(int x) : val(x), next(NULL) {}$/;"	f	struct:ListNode
ListNode	header.h	/^struct ListNode {$/;"	s
LongestCommonPrefix	header.h	/^class LongestCommonPrefix {$/;"	c
LongestPalindromicSubstring	header.h	/^class LongestPalindromicSubstring {$/;"	c
LongestSubstringWithoutRepeatingCharacters	header.h	/^class LongestSubstringWithoutRepeatingCharacters {$/;"	c
MajorityElement	header.h	/^class MajorityElement {$/;"	c
MajorityElementII	header.h	/^class MajorityElementII {$/;"	c
MinStack	header.h	/^class MinStack {$/;"	c
PalindromeNumber	header.h	/^class PalindromeNumber {$/;"	c
PathSumII	header.h	/^class PathSumII {$/;"	c
PopulatingNextRightPointersInEachNode	header.h	/^class PopulatingNextRightPointersInEachNode {$/;"	c
RemoveDuplicatesFromSortedArray	header.h	/^class RemoveDuplicatesFromSortedArray {$/;"	c
RemoveNthElementFromLast	header.h	/^class RemoveNthElementFromLast {$/;"	c
ReverseInteger	header.h	/^class ReverseInteger {$/;"	c
Solution	longest_common_prefix.cpp	/^class Solution {$/;"	c	file:
Solution	temp.cpp	/^class Solution {$/;"	c	file:
StringToInteger	header.h	/^class StringToInteger {$/;"	c
ThreeSum	header.h	/^class ThreeSum {$/;"	c
TreeLinkNode	header.h	/^	TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}$/;"	f	struct:TreeLinkNode
TreeLinkNode	header.h	/^struct TreeLinkNode {$/;"	s
TreeNode	header.h	/^	TreeNode(int x) : val(x), left(NULL), right(NULL) {}$/;"	f	struct:TreeNode
TreeNode	header.h	/^struct TreeNode {$/;"	s
ZigZagConversion	header.h	/^class ZigZagConversion {$/;"	c
a	bigint.cpp	/^    vector<int> a;$/;"	m	struct:bigint	file:
abs	bigint.cpp	/^    bigint abs() const {$/;"	f	struct:bigint
ans	header.h	/^		vector <string> ans;$/;"	m	class:LetterCombinationsOfAPhoneNumber
ans	header.h	/^	vector <vector<int>> ans;$/;"	m	class:PathSumII
atoi	StringToInteger.cpp	/^int StringToInteger::atoi(const char *s) {$/;"	f	class:StringToInteger
base	bigint.cpp	/^const int base = 1000000000;$/;"	v
base_digits	bigint.cpp	/^const int base_digits = 9;$/;"	v
bigint	bigint.cpp	/^    bigint() :$/;"	f	struct:bigint
bigint	bigint.cpp	/^    bigint(const string &s) {$/;"	f	struct:bigint
bigint	bigint.cpp	/^    bigint(long long v) {$/;"	f	struct:bigint
bigint	bigint.cpp	/^struct bigint {$/;"	s	file:
canCompleteCircuit	GasStation.cpp	/^int GasStation::canCompleteCircuit(vector<int> &gas, vector<int> &cost) {$/;"	f	class:GasStation
computeIntersectionPoint	IntersectionOfTwoLinkedLists.cpp	/^ListNode* computeIntersectionPoint(int diff, ListNode* headA, ListNode* headB) {$/;"	f
connect	PopulatingNextRightPointersInEachNode.cpp	/^void PopulatingNextRightPointersInEachNode::connect(TreeLinkNode *root) {$/;"	f	class:PopulatingNextRightPointersInEachNode
convert	ZigZagConversion.cpp	/^string ZigZagConversion::convert(string s, int nRows) {$/;"	f	class:ZigZagConversion
convertToTitle	ExcelSheetColumnTitle.cpp	/^string ExcelSheetColumnTitle::convertToTitle(int n) {$/;"	f	class:ExcelSheetColumnTitle
convert_base	bigint.cpp	/^    static vector<int> convert_base(const vector<int> &a, int old_digits, int new_digits) {$/;"	f	struct:bigint
digits	header.h	/^		string digits;$/;"	m	class:LetterCombinationsOfAPhoneNumber
divmod	bigint.cpp	/^    friend pair<bigint, bigint> divmod(const bigint &a1, const bigint &b1) {$/;"	f	struct:bigint
gcd	bigint.cpp	/^    friend bigint gcd(const bigint &a, const bigint &b) {$/;"	f	struct:bigint
getHeight	BalancedBinaryTree.cpp	/^int getHeight(TreeNode *root, bool& value) {$/;"	f
getIntersectionNode	IntersectionOfTwoLinkedLists.cpp	/^ListNode* IntersectionOfTwoLinkedLists::getIntersectionNode(ListNode *headA, ListNode *headB) {$/;"	f	class:IntersectionOfTwoLinkedLists
getLength	IntersectionOfTwoLinkedLists.cpp	/^int getLength(ListNode* head) {$/;"	f
getLong	PalindromeNumber.cpp	/^long long getLong(int x) {$/;"	f
getMin	MinStack.cpp	/^int MinStack::getMin() {$/;"	f	class:MinStack
getTriplets	3Sum.cpp	/^void getTriplets(vector <int> &num, int f, int m, int l, vector<vector<int>> &ans) {$/;"	f
grayCode	GrayCode.cpp	/^vector<int> GrayCode::grayCode(int n) {$/;"	f	class:GrayCode
isAnagram	temp.cpp	/^    bool isAnagram(string s, string t) {$/;"	f	class:Solution
isBalanced	BalancedBinaryTree.cpp	/^bool BalancedBinaryTree::isBalanced(TreeNode * root) {$/;"	f	class:BalancedBinaryTree
isPalindrome	PalindromeNumber.cpp	/^bool PalindromeNumber::isPalindrome(int x) {$/;"	f	class:PalindromeNumber
isZero	bigint.cpp	/^    bool isZero() const {$/;"	f	struct:bigint
karatsubaMultiply	bigint.cpp	/^    static vll karatsubaMultiply(const vll &a, const vll &b) {$/;"	f	struct:bigint
largestNumber	LargestNumber.cpp	/^string LargestNumber::largestNumber(vector<int> &num) {$/;"	f	class:LargestNumber
lcm	bigint.cpp	/^    friend bigint lcm(const bigint &a, const bigint &b) {$/;"	f	struct:bigint
left	header.h	/^	TreeLinkNode *left, *right, *next;$/;"	m	struct:TreeLinkNode
left	header.h	/^	TreeNode *left;$/;"	m	struct:TreeNode
lengthOfLongestSubstring	LongestSubstringWithoutRepeatingCharacters.cpp	/^int LongestSubstringWithoutRepeatingCharacters::lengthOfLongestSubstring(string s) {$/;"	f	class:LongestSubstringWithoutRepeatingCharacters
letterCombinations	LetterCombinationsOfAPhoneNumber.cpp	/^vector<string> LetterCombinationsOfAPhoneNumber::letterCombinations(string digits) {$/;"	f	class:LetterCombinationsOfAPhoneNumber
longValue	bigint.cpp	/^    long long longValue() const {$/;"	f	struct:bigint
longestCommonPrefix	LongestCommonPrefix.cpp	/^string LongestCommonPrefix::longestCommonPrefix(vector<string>& strs) {$/;"	f	class:LongestCommonPrefix
longestCommonPrefix	longest_common_prefix.cpp	/^    string longestCommonPrefix(vector<string>& strs) {$/;"	f	class:Solution
longestPalindrome	LongestPalindromicSubstring.cpp	/^string LongestPalindromicSubstring::longestPalindrome(string s) {$/;"	f	class:LongestPalindromicSubstring
main	main.cpp	/^int main() {$/;"	f
majorityElement	MajorityElement.cpp	/^int MajorityElement::majorityElement(vector<int>& nums) {$/;"	f	class:MajorityElement
majorityElement	MajorityElementII.cpp	/^vector<int> MajorityElementII::majorityElement(vector<int>& v) {$/;"	f	class:MajorityElementII
maxArea	ContainerWithMostWater.cpp	/^int ContainerWithMostWater::maxArea(vector <int> &height) {$/;"	f	class:ContainerWithMostWater
maxProfit	BestTimeToBuyAndSellStock.cpp	/^int BestTimeToBuyAndSellStock::maxProfit(vector<int> &prices) {$/;"	f	class:BestTimeToBuyAndSellStock
maxProfit	BestTimeToBuyAndSellStockII.cpp	/^int BestTimeToBuyAndSellStockII::maxProfit(vector<int> &prices) {$/;"	f	class:BestTimeToBuyAndSellStockII
minStk	MinStack.cpp	/^stack <int> minStk;$/;"	v
mp	header.h	/^		map<char, string> mp;$/;"	m	class:LetterCombinationsOfAPhoneNumber
next	header.h	/^	ListNode *next;$/;"	m	struct:ListNode
next	header.h	/^	TreeLinkNode *left, *right, *next;$/;"	m	struct:TreeLinkNode
operator !=	bigint.cpp	/^    bool operator!=(const bigint &v) const {$/;"	f	struct:bigint
operator %	bigint.cpp	/^    bigint operator%(const bigint &v) const {$/;"	f	struct:bigint
operator %	bigint.cpp	/^    int operator%(int v) const {$/;"	f	struct:bigint
operator *	bigint.cpp	/^    bigint operator*(const bigint &v) const {$/;"	f	struct:bigint
operator *	bigint.cpp	/^    bigint operator*(int v) const {$/;"	f	struct:bigint
operator *=	bigint.cpp	/^    void operator*=(const bigint &v) {$/;"	f	struct:bigint
operator *=	bigint.cpp	/^    void operator*=(int v) {$/;"	f	struct:bigint
operator +	bigint.cpp	/^    bigint operator+(const bigint &v) const {$/;"	f	struct:bigint
operator +=	bigint.cpp	/^    void operator+=(const bigint &v) {$/;"	f	struct:bigint
operator -	bigint.cpp	/^    bigint operator-() const {$/;"	f	struct:bigint
operator -	bigint.cpp	/^    bigint operator-(const bigint &v) const {$/;"	f	struct:bigint
operator -=	bigint.cpp	/^    void operator-=(const bigint &v) {$/;"	f	struct:bigint
operator /	bigint.cpp	/^    bigint operator\/(const bigint &v) const {$/;"	f	struct:bigint
operator /	bigint.cpp	/^    bigint operator\/(int v) const {$/;"	f	struct:bigint
operator /=	bigint.cpp	/^    void operator\/=(const bigint &v) {$/;"	f	struct:bigint
operator /=	bigint.cpp	/^    void operator\/=(int v) {$/;"	f	struct:bigint
operator <	bigint.cpp	/^    bool operator<(const bigint &v) const {$/;"	f	struct:bigint
operator <<	bigint.cpp	/^    friend ostream& operator<<(ostream &stream, const bigint &v) {$/;"	f	struct:bigint
operator <=	bigint.cpp	/^    bool operator<=(const bigint &v) const {$/;"	f	struct:bigint
operator =	bigint.cpp	/^    void operator=(const bigint &v) {$/;"	f	struct:bigint
operator =	bigint.cpp	/^    void operator=(long long v) {$/;"	f	struct:bigint
operator ==	bigint.cpp	/^    bool operator==(const bigint &v) const {$/;"	f	struct:bigint
operator >	bigint.cpp	/^    bool operator>(const bigint &v) const {$/;"	f	struct:bigint
operator >=	bigint.cpp	/^    bool operator>=(const bigint &v) const {$/;"	f	struct:bigint
operator >>	bigint.cpp	/^    friend istream& operator>>(istream &stream, bigint &v) {$/;"	f	struct:bigint
pathSum	PathSumII.cpp	/^vector<vector<int>> PathSumII::pathSum(TreeNode *root, int sum) {$/;"	f	class:PathSumII
pop	MinStack.cpp	/^void MinStack::pop() {$/;"	f	class:MinStack
printLinkedList	main.cpp	/^void printLinkedList(ListNode* head) {$/;"	f
printTreeLinkNode	main.cpp	/^void printTreeLinkNode(TreeLinkNode* root) {$/;"	f
push	MinStack.cpp	/^void MinStack::push(int x) {$/;"	f	class:MinStack
read	bigint.cpp	/^    void read(const string &s) {$/;"	f	struct:bigint
recurse	LetterCombinationsOfAPhoneNumber.cpp	/^void LetterCombinationsOfAPhoneNumber::recurse(string ch, int steps) {$/;"	f	class:LetterCombinationsOfAPhoneNumber
recurse	PathSumII.cpp	/^void PathSumII::recurse(TreeNode* root, int running_sum, int height, vector <int> v) {$/;"	f	class:PathSumII
recurse	PopulatingNextRightPointersInEachNode.cpp	/^void recurse(TreeLinkNode* root, TreeLinkNode* parent, bool isLeft) {$/;"	f
removeDuplicates	RemoveDuplicatesFromSortedArray.cpp	/^int RemoveDuplicatesFromSortedArray::removeDuplicates(vector<int> &nums) {$/;"	f	class:RemoveDuplicatesFromSortedArray
removeNthFromEnd	RemoveNthElementFromLast.cpp	/^ListNode* RemoveNthElementFromLast::removeNthFromEnd(ListNode *head, int n) {$/;"	f	class:RemoveNthElementFromLast
reverse	ReverseInteger.cpp	/^int ReverseInteger::reverse(int x) {$/;"	f	class:ReverseInteger
right	header.h	/^	TreeLinkNode *left, *right, *next;$/;"	m	struct:TreeLinkNode
right	header.h	/^	TreeNode *right;$/;"	m	struct:TreeNode
sign	bigint.cpp	/^    int sign;$/;"	m	struct:bigint	file:
sortNumbers	LargestNumber.cpp	/^bool sortNumbers(const int& f, const int& s) {$/;"	f
stk	MinStack.cpp	/^stack <int> stk;$/;"	v
sum	header.h	/^	int sum;$/;"	m	class:PathSumII
testBalancedBinaryTree	main.cpp	/^void testBalancedBinaryTree() {$/;"	f
testBestTimeToBuyAndSellStock	main.cpp	/^void testBestTimeToBuyAndSellStock() {$/;"	f
testBestTimeToBuyAndSellStockII	main.cpp	/^void testBestTimeToBuyAndSellStockII() {$/;"	f
testContainerWithMostWater	main.cpp	/^void testContainerWithMostWater() {$/;"	f
testExcelSheetColumnTitle	main.cpp	/^void testExcelSheetColumnTitle() {$/;"	f
testGasStation	main.cpp	/^void testGasStation() {$/;"	f
testGrayCode	main.cpp	/^void testGrayCode() {$/;"	f
testIntegerReverse	main.cpp	/^void testIntegerReverse() {$/;"	f
testIntersectionOfTwoLinkedLists	main.cpp	/^void testIntersectionOfTwoLinkedLists() {$/;"	f
testIsPalindrome	main.cpp	/^void testIsPalindrome() {$/;"	f
testLargestNumber	main.cpp	/^void testLargestNumber() {$/;"	f
testLetterCombinationsOfAPhoneNumber	main.cpp	/^void testLetterCombinationsOfAPhoneNumber() {$/;"	f
testLongestCommonPrefix	main.cpp	/^void testLongestCommonPrefix() {$/;"	f
testLongestPalindromicSubstring	main.cpp	/^void testLongestPalindromicSubstring() {$/;"	f
testLongestSubstringWithoutRepeatingCharacters	main.cpp	/^void testLongestSubstringWithoutRepeatingCharacters() {$/;"	f
testMajorityElement	main.cpp	/^void testMajorityElement() {$/;"	f
testMajorityElementII	main.cpp	/^void testMajorityElementII() {$/;"	f
testMinStack	main.cpp	/^void testMinStack() {$/;"	f
testPathSumII	main.cpp	/^void testPathSumII() {$/;"	f
testPopulatingNextRightPointersInEachNode	main.cpp	/^void testPopulatingNextRightPointersInEachNode() {$/;"	f
testRemoveDuplicates	main.cpp	/^void testRemoveDuplicates() {$/;"	f
testRemoveNthFromLast	main.cpp	/^void testRemoveNthFromLast() {$/;"	f
testStringToInteger	main.cpp	/^void testStringToInteger() {$/;"	f
testThreeSum	main.cpp	/^void testThreeSum() {$/;"	f
testZigZagConversion	main.cpp	/^void testZigZagConversion() {$/;"	f
threeSum	3Sum.cpp	/^vector<vector<int>> ThreeSum::threeSum(vector<int> num) {$/;"	f	class:ThreeSum
toLL	StringToInteger.cpp	/^long long toLL(string s) {$/;"	f
top	MinStack.cpp	/^int MinStack::top() {$/;"	f	class:MinStack
trim	bigint.cpp	/^    void trim() {$/;"	f	struct:bigint
val	header.h	/^	int val;$/;"	m	struct:ListNode
val	header.h	/^	int val;$/;"	m	struct:TreeLinkNode
val	header.h	/^	int val;$/;"	m	struct:TreeNode
vll	bigint.cpp	/^    typedef vector<long long> vll;$/;"	t	struct:bigint	file:
