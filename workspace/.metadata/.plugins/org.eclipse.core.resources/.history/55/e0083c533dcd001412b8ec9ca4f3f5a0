package edu.buffalo.cse562;

import static edu.buffalo.cse562.utils.TableUtils.convertColumnDefinitionIntoSelectExpressionItems;
import static edu.buffalo.cse562.utils.TableUtils.convertSelectExpressionItemIntoExpressions;
import static edu.buffalo.cse562.utils.TableUtils.toUnescapedString;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import net.sf.jsqlparser.expression.DateValue;
import net.sf.jsqlparser.expression.DoubleValue;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.expression.LeafValue;
import net.sf.jsqlparser.expression.LongValue;
import net.sf.jsqlparser.expression.StringValue;
import net.sf.jsqlparser.expression.operators.relational.EqualsTo;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.create.table.ColumnDefinition;
import net.sf.jsqlparser.statement.create.table.CreateTable;
import net.sf.jsqlparser.statement.select.SelectExpressionItem;
import edu.buffalo.cse562.queryplan.BufferDataSource;
import edu.buffalo.cse562.queryplan.DataSource;
import edu.buffalo.cse562.queryplan.FileDataSource;
import edu.buffalo.cse562.queryplan.Node;
import edu.buffalo.cse562.queryplan.RelationNode;
import edu.buffalo.cse562.utils.TableUtils;

public class SortedMergeJoin {
	private Node node1;
	private Node node2;
	//predicate should be equals to for SMJ 
	private EqualsTo expression;
	
	public SortedMergeJoin(Node node1, Node node2, EqualsTo expression) {
		this.node1 = node1;
		this.node2 = node2;
		this.expression = expression;
	}
	
	public RelationNode doMergeJoins() {
		RelationNode relationNode1 = node1.eval();
		RelationNode relationNode2 = node2.eval();
		CreateTable table1 = relationNode1.getTable();
		CreateTable table2 = relationNode2.getTable();
		
		List<SelectExpressionItem> items = convertColumnDefinitionIntoSelectExpressionItems(table1.getColumnDefinitions());
		DataSource dataFile1 = relationNode1.getFile();
		DataSource dataFile2 = relationNode2.getFile();
		
		List<Expression> table1ItemsExpression = convertSelectExpressionItemIntoExpressions(items);		
		List<Expression> table2ItemsExpression = convertSelectExpressionItemIntoExpressions(convertColumnDefinitionIntoSelectExpressionItems(table2.getColumnDefinitions()));		
		String newTableName = getNewTableName(table1, table2);
		
		Expression leftExpression = expression.getLeftExpression();
		Expression rightExpression = expression.getRightExpression();
		
		List <Column> colDefList1 = table1.getColumnDefinitions();
		List <Column> colDefList2 = table2.getColumnDefinitions();
		
		int indexCol1 = -1;
		int indexCol2 = -1;
		
		for (int i = 0; i < colDefList1.size(); i++) {
			Column col1 = colDefList1.get(i);
			if (leftExpression instanceof Column && leftExpression.toString().equalsIgnoreCase(col1.toString())
					|| rightExpression instanceof Column && rightExpression.toString().equalsIgnoreCase(col1.toString())) {
				indexCol1 = i;
				break;
			}
		}
		for (int i = 0; i < colDefList2.size(); i++) {
			Column col2 = colDefList2.get(i);
			if (leftExpression instanceof Column && leftExpression.toString().equalsIgnoreCase(col2.toString())
					|| rightExpression instanceof Column && rightExpression.toString().equalsIgnoreCase(col2.toString())) {
				indexCol2 = i;
				break;
			}
		}
		
		if (indexCol1 == -1 || indexCol2 == -1) {
			//TODO
			throw new RuntimeException();
		}
		
		
		DataSource file = null;
		if(TableUtils.isSwapOn)
			file =new FileDataSource( new File(TableUtils.getTempDataDir() + File.separator + newTableName + ".dat"));
		else
			file = new BufferDataSource();
		
		SqlIterator sqlIterator1 = new SqlIterator(table1,table1ItemsExpression , dataFile1,null);
		SqlIterator sqlIterator2 = new SqlIterator(table2, table2ItemsExpression, dataFile2,null);
		
		try {
			PrintWriter pw = new PrintWriter(file.getWriter());
			LeafValue[] colVals1 = sqlIterator1.next();
			LeafValue[] colVals2 = sqlIterator2.next();
			while (colVals1 != null && colVals2 != null) {

				if (colVals1[indexCol1].toString().equals(colVals2[indexCol2].toString())) {
					List <LeafValue> firstList = new ArrayList <>();
					List <LeafValue> seconList = new ArrayList <>();
					for (int i = 0; i < colVals1.length; i++) {
						firstList.add(colVals1[i]);
					} 
					for (int i = 0; i < colVals2.length; i++) {
						seconList.add(colVals2[i]);
					}
					int i;
					for (i = 0; i < colVals1.length; i++) {
						pw.print(toUnescapedString(colVals1[i]) + "|");
					}
					for (i = 1; i < colVals2.length; i++) {
						pw.print(toUnescapedString(colVals2[i - 1]) + "|");
					}
					if (colVals2.length > 0)
						pw.println(toUnescapedString(colVals2[i - 1]));
					colVals1 = sqlIterator1.next();
					colVals2 = sqlIterator2.next();
				} else if (compareTwoLeafValues(colVals1[indexCol1], colVals2[indexCol2]) < 0) {
					colVals1 = sqlIterator1.next();
				} else {
					colVals2 = sqlIterator2.next();
				}
			}
			sqlIterator1.close();
			sqlIterator2.close();
			pw.close();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		List<ColumnDefinition> newList = new ArrayList<ColumnDefinition>();
		newList.addAll(table1.getColumnDefinitions());
		newList.addAll(table2.getColumnDefinitions());
		CreateTable newTable = new CreateTable();
		newTable.setTable(new Table(null, newTableName));
		newTable.setColumnDefinitions(newList);
				
		RelationNode relationNode = new RelationNode(newTableName, null,file,newTable);
		return relationNode;
	}	
	
	private String getNewTableName(CreateTable table1,CreateTable table2){
		return table1.getTable().getName() + "_MERGE_" + table2.getTable().getName();
	}
	
	private int compareTwoLeafValues(LeafValue leafValue1, LeafValue leafValue2) {
		int ans = 0;
		if (leafValue1 instanceof DoubleValue && leafValue2 instanceof DoubleValue)
			ans = ((DoubleValue)leafValue1).getValue() < ((DoubleValue)leafValue2).getValue() ? -1 : 1;
		else if (leafValue1 instanceof LongValue)
			ans = ((LongValue)leafValue1).getValue() < ((LongValue)leafValue2).getValue() ? -1 : 1;
		else if (leafValue1 instanceof StringValue)
			ans = ((StringValue)leafValue1).getValue().compareTo(((StringValue)leafValue2).getValue());
		else if (leafValue1 instanceof DateValue)
			ans = ((DateValue)leafValue1).getValue().compareTo(((DateValue)leafValue2).getValue());
		return ans;
	}
}
