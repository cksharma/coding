package pastchallenges;

import java.util.*;


public class RevengeOfTheSith {

    public static int INF = (int)1e7;

    class State {
        int remShift;
        int remItems;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            State index = (State) o;

            if (remShift != index.remShift) return false;
            return remItems == index.remItems;

        }

        @Override
        public int hashCode() {
            int result = remShift;
            result = 31 * result + remItems;
            return result;
        }
    }

    public int topDownRecursive(int penalty[], int steps[], int W, int D) {
        Map<State, Integer> map = new HashMap<>();
        return recurse(penalty, steps, W, penalty.length - 1, 0, map, D, new ArrayList<>());
    }

    public int recurse(int penalty[], int steps[], int T, int totalItems, int currentItem, Map<State, Integer> map, int D, List<Integer> list) {
        if(currentItem >= totalItems || T <= 0) {
            int cost = 0;
            for (int i = 0; i < steps.length; i++) {
                if (list.contains(i)) {
                    int prev = steps[i - 1];
                    int next = steps[i + 1];
                    int mid = (prev + next) / 2;
                    if (mid - prev > D) cost += Math.pow(mid - prev, 2);
                    if (mid - next > D) cost += Math.pow(mid - next, 2);
                }
            }
            return cost;
        }

        State key = new State();
        key.remItems = totalItems - currentItem -1;
        key.remShift = T;

        if(map.containsKey(key)) {
            return map.get(key);
        }
        int minValue;

        if(T < steps[currentItem] || currentItem == 0) {
            minValue = recurse(penalty, steps, T, totalItems, currentItem + 1, map, D, list);
        } else {
            list.add(currentItem);
            int take = penalty[currentItem] + recurse(penalty, steps, T - 1, totalItems, currentItem + 1, map, D, list);

            list.remove(list.size() - 1);
            int notTake = recurse(penalty, steps, T, totalItems, currentItem + 1, map, D, list);
            minValue = Math.min(take, notTake);
        }
        map.put(key, minValue);
        return minValue;
    }

    public int move(int[] steps, int T, int D) {
        int n = steps.length;
        int[] penalty = new int[n];
        for (int i = 1; i < steps.length; i++) steps[i] += steps[i - 1];
        for (int i = 1; i < steps.length; i++) {
            penalty[i] = (int)Math.pow(steps[i - 1] - steps[i] , 2.);
        }
        return topDownRecursive(penalty, steps, T, D);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit-pf 2.3.0
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, int p2, boolean hasAnswer, int p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + p1 + "," + p2);
        System.out.println("]");
        RevengeOfTheSith obj;
        int answer;
        obj = new RevengeOfTheSith();
        long startTime = System.currentTimeMillis();
        answer = obj.move(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        boolean disabled;
        boolean tests_disabled;
        all_right = true;
        tests_disabled = false;

        int[] p0;
        int p1;
        int p2;
        int p3;

        // ----- test 0 -----
        disabled = false;
        p0 = new int[]{2, 3, 5};
        p1 = 1;
        p2 = 1;
        p3 = 19;
        all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 1 -----
        disabled = false;
        p0 = new int[]{2, 3, 5};
        p1 = 2;
        p2 = 1;
        p3 = 17;
        all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 2 -----
        disabled = false;
        p0 = new int[]{1, 2, 3, 4, 5, 6};
        p1 = 1;
        p2 = 2;
        p3 = 30;
        all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 3 -----
        disabled = false;
        p0 = new int[]{1, 1, 1, 1, 1, 1, 1};
        p1 = 3;
        p2 = 3;
        p3 = 0;
        all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        // ----- test 4 -----
        disabled = false;
        p0 = new int[]{1, 2, 3};
        p1 = 2;
        p2 = 2;
        p3 = 0;
        all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3)) && all_right;
        tests_disabled = tests_disabled || disabled;
        // ------------------

        if (all_right) {
            if (tests_disabled) {
                System.out.println("You're a stud (but some test cases were disabled)!");
            } else {
                System.out.println("You're a stud (at least on given cases)!");
            }
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
